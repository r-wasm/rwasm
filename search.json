[{"path":[]},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://r-wasm.github.io/rwasm/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://r-wasm.github.io/rwasm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rwasm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-wasm.github.io/rwasm/articles/github-actions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Build R packages using GitHub Actions","text":"Using set GitHub Actions provided r-wasm/actions, possible automatically build deploy WebAssembly binary versions R packages. workflow simplifies process deploying R packages use webR, facilitates continuous integration.","code":""},{"path":"https://r-wasm.github.io/rwasm/articles/github-actions.html","id":"deploying-an-r-package-on-release","dir":"Articles","previous_headings":"","what":"Deploying an R package on release","title":"Build R packages using GitHub Actions","text":"possible build R package WebAssembly, optionally including R package dependencies output, using release-file-system-image.yml GitHub Actions workflow. First, add GitHub action R package repository: Commit new GitHub Actions file, make package release GitHub web interface. GitHub Actions build Wasm filesystem image package dependencies upload asset files specific package release. Github Action finished running, asset files library.data library.js.metadata can downloaded GitHub releases page. using Wasm R package Shiny app shinylive::export(), now downloaded automatically part app export. Otherwise, read details make resulting R package binaries available webR application.","code":"usethis::use_github_action(   url = \"https://raw.githubusercontent.com/r-wasm/actions/v1/examples/release-file-system-image.yml\" )"},{"path":"https://r-wasm.github.io/rwasm/articles/github-actions.html","id":"hosting-the-resulting-package","dir":"Articles","previous_headings":"Deploying an R package on release","what":"Hosting the resulting package","title":"Build R packages using GitHub Actions","text":"principle, possible directly mount filesystem image release asset URL using webr::mount(). However, web browsers likely blocked due CORS mechanism. Instead, files uploaded static hosting way, example additional GitHub Actions steps uploads release assets GitHub Pages. example GitHub action uploads release assets GitHub pages, addition pkgdown documentation, can found . files hosted GitHub Pages, otherwise, mount filesystem image webR set .libPaths() load R packages package library: information Emscripten filesystem images can found vignette(\"mount-fs-image.Rmd\") article.","code":"webr::mount(\"/my-library\", \"https://org.github.io/repo/download/library.data\") .libPaths(c(.libPaths(), \"/my-library\")) library(dplyr) #> Attaching package: ‘dplyr’ #> #> The following objects are masked from ‘package:stats’: #> #>     filter, lag #> #> The following objects are masked from ‘package:base’: #> #>     intersect, setdiff, setequal, union"},{"path":"https://r-wasm.github.io/rwasm/articles/github-actions.html","id":"creating-a-webassembly-cran-like-repository","dir":"Articles","previous_headings":"","what":"Creating a WebAssembly CRAN-like repository","title":"Build R packages using GitHub Actions","text":"Alternatively, multiple R packages may want build custom WebAssembly CRAN-like repository GitHub Pages. workflow useful want manage several packages mind creating new repository, separate R package source, . First, create new GitHub repository following GitHub’s instructions initialise new empty git repo. Create file named packages, containing list R package references. Add one R package per line, custom R packages hosted GitHub may also included . example: Next, create new GitHub Actions workflow file .github/workflows/deploy.yml, running workflow contents two workflow jobs. first job builds list R packages package repository uploads artifact file. second job downloads deploys package repository GitHub Pages. workflow file look like : Commit new GitHub Actions file changes, push commit GitHub.","code":"cli dplyr tidyverse/ggplot2@v3.4.4 usethis::use_github_action(   url = \"https://raw.githubusercontent.com/r-wasm/actions/v1/examples/deploy-cran-repo.yml\",   save_as = \"deploy.yml\" ) # Workflow derived from https://github.com/r-wasm/actions/tree/v1/examples # Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help on:   push:     # Only build on main or master branch     branches: [main, master]   # Or when triggered manually   workflow_dispatch:  name: Build and deploy wasm R package repository  jobs:   # Reads `./packages` for package references to put   # into a CRAN-like repository hosted on GitHub pages   deploy-cran-repo:     uses: r-wasm/actions/.github/workflows/deploy-cran-repo.yml@v1     permissions:       # To download GitHub Packages within action       repository-projects: read       # For publishing to pages environment       pages: write       id-token: write"},{"path":"https://r-wasm.github.io/rwasm/articles/github-actions.html","id":"the-github-actions-build-process","dir":"Articles","previous_headings":"Creating a WebAssembly CRAN-like repository","what":"The GitHub Actions build process","title":"Build R packages using GitHub Actions","text":"GitHub Actions workflow automatically start run build list packages. able see progress website build step Actions section GitHub project. little , GitHub Pages website ready webR able install package GitHub Pages URL: usage details can found r-wasm/actions GitHub documentation.","code":"webr::install(\"cli\", repos = \"http://username.github.io/my-wasm-repo/\") #> Downloading webR package: cli"},{"path":[]},{"path":"https://r-wasm.github.io/rwasm/articles/mount-fs-image.html","id":"emscriptens-file_packager-tool","dir":"Articles","previous_headings":"Create filesystem images","what":"Emscripten’s file_packager tool","title":"Mounting filesystem images","text":"file_packager tool, provided Emscripten, takes directory structure input produces webR compatible filesystem image output. file_packager tool may invoked rwasm package: can also invoked directly using CLI1, prefer: examples, files directory ./input packaged output filesystem image created2 consisting data file, output.data, metadata file, output.js.metadata. prepare mounting filesystem image webR, ensure files basename (example, output). resulting URLs relative paths two files differ file extension.","code":"rwasm::file_packager(\"./input\", out_dir = \".\", out_name = \"output\") $ file_packager output.data --preload ./input@/ \\     --separate-metadata --js-output=output.js"},{"path":"https://r-wasm.github.io/rwasm/articles/mount-fs-image.html","id":"compression","dir":"Articles","previous_headings":"Create filesystem images > Emscripten’s file_packager tool","what":"Compression","title":"Mounting filesystem images","text":"Filesystem image .data files may optionally gzip compressed prior deployment. file extension compressed filesystem images .data.gz, compression indicated setting property gzip: true metadata JSON stored .js.metadata file. NOTE: Loading compressed VFS images requires least version 0.4.1 webR.","code":""},{"path":"https://r-wasm.github.io/rwasm/articles/mount-fs-image.html","id":"mount--tar-archives-as-a-filesystem-image","dir":"Articles","previous_headings":"Create filesystem images","what":"Mount .tar archives as a filesystem image","title":"Mounting filesystem images","text":"Archives .tar format, optionally gzip compressed .tar.gz .tgz files, can also used filesystem images pre-processing .tar archive using rwasm::add_tar_index() function. function reads archive contents appends required filesystem metadata end .tar archive data way understood webR. information format see Technical details .tar archive metadata article. processed rwasm::add_tar_index(), .tar archive can deployed used directly filesystem image.","code":"rwasm::add_tar_index(\"./path/to/archive.tar.gz\") # Appending virtual filesystem metadata for: ./path/to/archive.tar.gz"},{"path":"https://r-wasm.github.io/rwasm/articles/mount-fs-image.html","id":"mounting-filesystem-images","dir":"Articles","previous_headings":"","what":"Mounting filesystem images","title":"Mounting filesystem images","text":"running web browser, webr::mount() function downloads mounts filesystem image URL source, using WORKERFS filesystem type. Filesystem images deployed static file hosting3 resulting URL provided source argument. image mounted virtual filesystem path given mountpoint argument. mountpoint directory exist, created prior mounting. running Node.js, source may also provided relative path filesystem image disk. test filesystem images deployment, serve using local static webserver. See Local Testing section example using httpuv::runStaticServer() R.","code":"webr::mount(   mountpoint = \"/data\",   source = \"https://example.com/output.data\" )"},{"path":"https://r-wasm.github.io/rwasm/articles/mount-fs-image.html","id":"building-an-r-package-library-image","dir":"Articles","previous_headings":"","what":"Building an R package library image","title":"Mounting filesystem images","text":"collection R packages can collected bundled single filesystem image mounting. build R package library image must first build one Wasm R packages using add_pkg(). example, let’s build package hard dependencies. Ensure running R environment access Wasm development tools4, run: build process completed, new repo directory contains CRAN-like package repository R packages build Wasm. Next, run following build Emscripten VFS image: default, function create new directory named vfs exist. files vfs/library.data vfs/library.js.metadata together form Emscripten filesystem image containing R package library consisting packages previously added CRAN-like repository repo using add_pkg().","code":"rwasm::add_pkg(\"dplyr\") rwasm::make_vfs_library()"},{"path":"https://r-wasm.github.io/rwasm/articles/mount-fs-image.html","id":"local-testing","dir":"Articles","previous_headings":"Building an R package library image","what":"Local testing","title":"Mounting filesystem images","text":"following R command starts local web server serve filesystem image testing5. serving files locally, sure include Access-Control-Allow-Origin: * HTTP header, required downloading files cross-origin server CORS mechanism. web server running start webR session browser, console https://webr.r-wasm.org/latest/. Use webr::mount() make R library image available somewhere VFS6: mounted, contents filesystem image available /-library virtual filesystem. new directory added R’s .libPaths(), R packages may loaded new library.","code":"httpuv::runStaticServer(   dir = \".\",   port = 9090,   browse = FALSE,   headers = list(\"Access-Control-Allow-Origin\" =  \"*\") ) webr::mount(\"/my-library\", \"http://127.0.0.1:9090/vfs/library.data\") list.files(\"/my-library\") #>  [1] \"R6\"         \"cli\"        \"dplyr\"     \"fansi\"      \"generics\"   \"glue\" #>  [7] \"lifecycle\"  \"magrittr\"   \"pillar\"    \"pkgconfig\"  \"rlang\"      \"tibble\" #> [13] \"tidyselect\" \"utf8\"       \"vctrs\"     \"withr\" .libPaths(c(.libPaths(), \"/my-library\")) library(dplyr) #> Attaching package: ‘dplyr’ #> #> The following objects are masked from ‘package:stats’: #> #>     filter, lag #> #> The following objects are masked from ‘package:base’: #> #>     intersect, setdiff, setequal, union"},{"path":"https://r-wasm.github.io/rwasm/articles/mount-host-dir.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Mounting host directories in node","text":"running Node.js, Emscripten WebAssembly environment can make available contents directory host filesystem. addition providing webR access external data files, pre-prepared R package library can mounted host filesystem. avoids need download potentially large R packages filesystem images network. See webR documentation details mounting host directories Node.js.","code":""},{"path":"https://r-wasm.github.io/rwasm/articles/mount-host-dir.html","id":"building-an-r-package-library","dir":"Articles","previous_headings":"","what":"Building an R package library","title":"Mounting host directories in node","text":"build R package library, must first build one Wasm R packages using add_pkg(). example, let’s build package hard dependencies. Ensure running R environment access Wasm development tools1, run: build process completed, new repo directory contains CRAN-like package repository R packages build Wasm. Next, run following build R package library: default, function create new directory named lib already exist. directory contain R package library consisting packages previously added CRAN-like repository repo using add_pkg().","code":"rwasm::add_pkg(\"dplyr\") rwasm::make_library()"},{"path":"https://r-wasm.github.io/rwasm/articles/mount-host-dir.html","id":"mounting-host-directories","dir":"Articles","previous_headings":"","what":"Mounting host directories","title":"Mounting host directories in node","text":"node application, use webR JS API create new directory VFS mount host directory containing R packages: mounted, contents host R library directory available /-library virtual filesystem. new directory added R’s .libPaths(), R packages may loaded new library.","code":"await webR.init(); await webR.FS.mkdir(\"/my-library\"); await webR.FS.mount('NODEFS', { root: '/path/to/lib' }, \"/my-library\"); list.files(\"/my-library\") #>  [1] \"R6\"         \"cli\"        \"dplyr\"     \"fansi\"      \"generics\"   \"glue\" #>  [7] \"lifecycle\"  \"magrittr\"   \"pillar\"    \"pkgconfig\"  \"rlang\"      \"tibble\" #> [13] \"tidyselect\" \"utf8\"       \"vctrs\"     \"withr\" .libPaths(c(.libPaths(), \"/my-library\")) library(dplyr) #> Attaching package: ‘dplyr’ #> #> The following objects are masked from ‘package:stats’: #> #>     filter, lag #> #> The following objects are masked from ‘package:base’: #> #>     intersect, setdiff, setequal, union"},{"path":"https://r-wasm.github.io/rwasm/articles/rwasm.html","id":"compiling-r-packages-for-webassembly","dir":"Articles","previous_headings":"","what":"Compiling R packages for WebAssembly","title":"Get started with rwasm","text":"Building binary R packages WebAssembly (Wasm) requires cross-compiling packages containing C/C++/Fortran source code using Wasm development toolchain. , Emscripten C/C++ toolchain version LLVM flang configured output Wasm must available environment rwasm package function. two supported ways ensure required environment toolchain available. Either install build local development build webR, use rwasm package inside pre-prepared Docker container build Wasm R packages.","code":""},{"path":"https://r-wasm.github.io/rwasm/articles/rwasm.html","id":"setting-up-the-webassembly-toolchain","dir":"Articles","previous_headings":"","what":"Setting up the WebAssembly toolchain","title":"Get started with rwasm","text":"Using webR Docker container WebR development installation First, ensure Docker installed machine1. , terminal, pull latest version webR development container: Next, create new directory named output store built R packages, start R Docker container, mounting new output directory place setting working directory2: may now continue working R session. Docker container provide required development environment tools building binary R packages Wasm. R packages repositories built way written directory output. Note building webR source takes long time lot disk space, mostly due requirement building LLVM flang source. Follow webR build instructions download build webR source. planning build R packages depend system libraries, ensure also perform optional step additionally build WebAssembly libraries. webR built, need configure environment native R process can find webR development installation. Make note webR development directory Emscripten installation directory3. Edit create file ~/.webr-vars.mk, ensure contains following lines, replacing values installation directories: settings can also made available R exporting environment variables.","code":"docker pull ghcr.io/r-wasm/webr:main mkdir -p output docker run -it --rm -v ${PWD}/output:/output -w /output ghcr.io/r-wasm/webr:main R WEBR_ROOT=/home/username/webr EMSCRIPTEN_ROOT=/home/username/emsdk/upstream/emscripten"},{"path":"https://r-wasm.github.io/rwasm/articles/rwasm.html","id":"installing-the-rwasm-package","dir":"Articles","previous_headings":"","what":"Installing the rwasm package","title":"Get started with rwasm","text":"rwasm package builds R binary packages WebAssembly, organising output CRAN-like repositories. pak package can used install rwasm GitHub. installed, load rwasm package. rwasm able find Wasm development environment, print directories discovered version webR targeting. might different version R installed native system.","code":"install.packages(\"pak\") pak::pak(\"r-wasm/rwasm\") library(rwasm) #> Targeting Wasm packages for R 4.3.0 #> With `WEBR_ROOT` directory: /opt/webr #> With `EMSCRIPTEN_ROOT` directory: /opt/emsdk/upstream/emscripten"},{"path":"https://r-wasm.github.io/rwasm/articles/rwasm.html","id":"building-an-r-package","dir":"Articles","previous_headings":"","what":"Building an R package","title":"Get started with rwasm","text":"R package binaries can built WebAssembly using build() function. resulting Wasm R package binary Emscripten filesystem image containing R package written directory given out_dir argument, defaulting current working directory. Wasm R package binaries must made available webR filesystem way can used. Read details build R package library static web hosting Wasm R packages. Alternatively, see vignette(\"mount-fs-image.Rmd\") details mount Emscripten filesystem images.","code":"build(\"cli\")"},{"path":"https://r-wasm.github.io/rwasm/articles/rwasm.html","id":"adding-an-r-package-to-a-package-repository","dir":"Articles","previous_headings":"","what":"Adding an R package to a package repository","title":"Get started with rwasm","text":"Use add_pkg() build R package (along dependencies) Wasm add R package repository. new directory named repo created repository already exist, otherwise existing repository updated include new package. default, hard package dependencies also built Wasm added repository. See ?pkgdepends::pkg_refs article see kind package references can used add packages repository.","code":"add_pkg(\"cli\")"},{"path":"https://r-wasm.github.io/rwasm/articles/rwasm.html","id":"managing-and-using-the-repository","dir":"Articles","previous_headings":"","what":"Managing and using the repository","title":"Get started with rwasm","text":"CRAN-like R package repository output directory repo hosted web server available URL. URL can passed webr::install() repository install Wasm R packages.","code":""},{"path":"https://r-wasm.github.io/rwasm/articles/rwasm.html","id":"local-testing","dir":"Articles","previous_headings":"Managing and using the repository","what":"Local testing","title":"Get started with rwasm","text":"R command given starts local web server serve package repository testing4. Access-Control-Allow-Origin: * HTTP header included, required loading R packages cross-origin server CORS mechanism. using Docker container build Wasm R packages, sure run following command new R session outside Docker web server accessible host machine. might also want set dir = \"./output\" serve contents output directory mounted Docker container. web server running start webR session browser, console https://webr.r-wasm.org/latest/. Install package local repository using test server URL repos argument5:","code":"httpuv::runStaticServer(   dir = \".\",   port = 9090,   browse = FALSE,   headers = list(\"Access-Control-Allow-Origin\" =  \"*\") ) webr::install(\"cli\", repos = \"http://127.0.0.1:9090/repo\") #> Downloading webR package: cli"},{"path":"https://r-wasm.github.io/rwasm/articles/rwasm.html","id":"deployment-to-static-hosting","dir":"Articles","previous_headings":"Managing and using the repository","what":"Deployment to static hosting","title":"Get started with rwasm","text":"happy R package repository working sufficient, deployed web via static file hosting service choice. example use GitHub Pages. First, create new directory GitHub repository copy webR binary repo place. Next, initialise new GitHub repository host binary R packages, run commands given GitHub initialise push initial commit Wasm binary packages. Now, web browser, refresh GitHub project click Settings. see “Settings” tab, click dropdown menu, click Settings.  “Code automation” section sidebar, click Pages. “Build deployment”, “Source”, select Deploy branch. “Branch”, use branch dropdown menu select main publishing source, click Save.  GitHub start prepare GitHub Pages site contain CRAN-like Wasm package repository. little while6, GitHub Pages website ready webR able install package GitHub Pages repo URL.","code":"mkdir -p my-wasm-repo cp -r ./path/to/output/repo my-wasm-repo/repo cd my-wasm-repo git init git add repo git commit -m \"First commit\" git branch -M main git remote add origin https://github.com/username/my-wasm-repo.git git push -u origin main webr::install(\"cli\", repos = \"http://username.github.io/my-wasm-repo/repo\") #> Downloading webR package: cli"},{"path":"https://r-wasm.github.io/rwasm/articles/tar-metadata.html","id":"filesystem-metadata","dir":"Articles","previous_headings":"","what":"Filesystem metadata","title":"Technical details for .tar archive metadata","text":"Virtual filesystem metadata JavaScript object, encoded JSON string. format defined output Emscripten’s file_packager tool understood webR’s mounting API. metadata object gives location file archive mounted, takes following format:","code":"{   files: {     filename: string;     start: number;     end: number;   }[], };"},{"path":"https://r-wasm.github.io/rwasm/articles/tar-metadata.html","id":"archive-data-layout","dir":"Articles","previous_headings":"","what":"Archive data layout","title":"Technical details for .tar archive metadata","text":".tar archive can directly mounted webR includes filesystem metadata file named .vfs-index.json top level archive. .tar archive may also include “metadata hint” end file, end--archive marker. Appending additional hint data optional, allows efficient mounting archive contents virtual filesystem. resulting .tar file may gzip compressed, file extension .tar.gz .tgz. Data layout .tar archive containing filesystem metadata.","code":""},{"path":"https://r-wasm.github.io/rwasm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"George Stagg. Author, maintainer. Lionel Henry. Contributor. Jeroen Ooms. Contributor. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://r-wasm.github.io/rwasm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stagg G (2024). rwasm: Build R Packages WebAssembly. R package version 0.2.0.9000, https://github.com/r-wasm/rwasm, https://r-wasm.github.io/rwasm/.","code":"@Manual{,   title = {rwasm: Build R Packages for WebAssembly},   author = {George Stagg},   year = {2024},   note = {R package version 0.2.0.9000, https://github.com/r-wasm/rwasm},   url = {https://r-wasm.github.io/rwasm/}, }"},{"path":[]},{"path":"https://r-wasm.github.io/rwasm/index.html","id":"build-r-packages-for-webassembly","dir":"","previous_headings":"","what":"Build R Packages for WebAssembly","title":"Build R Packages for WebAssembly","text":"package provides functions help build R packages compiled WebAssembly (Wasm), manage Wasm binary R package libraries repositories, prepare webR compatible filesystem images static web hosting data files R packages.","code":""},{"path":"https://r-wasm.github.io/rwasm/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Build R Packages for WebAssembly","text":"Building binary R packages Wasm requires cross-compiling packages containing C/C++/Fortran source code using Wasm development toolchain. , Emscripten C/C++ toolchain version LLVM flang configured output Wasm must available environment rwasm package function. convenience, webR GitHub repository provides Docker container containing full Wasm development environment required building Wasm R packages.","code":""},{"path":"https://r-wasm.github.io/rwasm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Build R Packages for WebAssembly","text":"rwasm package yet CRAN. can install development version GitHub via: information explaining set Wasm development environment build R packages can found vignette(\"rwasm\").","code":"# install.packages(\"pak\") pak::pak(\"r-wasm/rwasm\")"},{"path":"https://r-wasm.github.io/rwasm/reference/add_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Add one or more packages from a file — add_list","title":"Add one or more packages from a file — add_list","text":"Downloads builds list R package references file list_file, compiling package use WebAssembly webR. resulting WebAssembly binary packages added repository directory repo_dir. repository directory created already exist.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/add_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add one or more packages from a file — add_list","text":"","code":"add_list(list_file, ...)"},{"path":"https://r-wasm.github.io/rwasm/reference/add_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add one or more packages from a file — add_list","text":"list_file Path file containing list R package references. ... Arguments passed add_pkg repo_dir package repository directory. Defaults \"./repo\". remotes character vector package references prefer remote source. Defaults NA, meaning prefer built-list references packages pre-modified use webR. dependencies Dependency specification packages additionally add repository. Defaults FALSE, meaning additional packages. Use NA install hard dependencies whereas TRUE installs optional dependencies well. See pkgdepends::as_pkg_dependencies details. compress TRUE, add compress Emscripten virtual filesystem metadata resulting R package binary .tgz files. Otherwise, file_packager() used create uncompressed virtual filesystem images included output binary package repository. Defaults TRUE.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/add_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add one or more packages from a file — add_list","text":"R package references listed file list_file, one line per package reference.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/add_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Add R package reference(s) to a package repository — add_pkg","title":"Add R package reference(s) to a package repository — add_pkg","text":"Downloads builds R package references given packages, compiling package use WebAssembly webR. resulting WebAssembly binary packages added repository directory repo_dir. repository directory created already exist.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/add_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add R package reference(s) to a package repository — add_pkg","text":"","code":"add_pkg(   packages,   repo_dir = \"./repo\",   remotes = NA,   dependencies = FALSE,   compress = TRUE )"},{"path":"https://r-wasm.github.io/rwasm/reference/add_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add R package reference(s) to a package repository — add_pkg","text":"packages character vector one package references. repo_dir package repository directory. Defaults \"./repo\". remotes character vector package references prefer remote source. Defaults NA, meaning prefer built-list references packages pre-modified use webR. dependencies Dependency specification packages additionally add repository. Defaults FALSE, meaning additional packages. Use NA install hard dependencies whereas TRUE installs optional dependencies well. See pkgdepends::as_pkg_dependencies details. compress TRUE, add compress Emscripten virtual filesystem metadata resulting R package binary .tgz files. Otherwise, file_packager() used create uncompressed virtual filesystem images included output binary package repository. Defaults TRUE.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/add_repo.html","id":null,"dir":"Reference","previous_headings":"","what":"Add all packages from a CRAN-like repository to a package repository — add_repo","title":"Add all packages from a CRAN-like repository to a package repository — add_repo","text":"Downloads builds available source R packages R package repositories given repos, compiling package use WebAssembly webR. resulting WebAssembly binary packages added repository directory repo_dir. repository directory created already exist.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/add_repo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add all packages from a CRAN-like repository to a package repository — add_repo","text":"","code":"add_repo(repos = ppm_config$cran_mirror, skip = FALSE, ...)"},{"path":"https://r-wasm.github.io/rwasm/reference/add_repo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add all packages from a CRAN-like repository to a package repository — add_repo","text":"repos character vector containing base URL(s) CRAN-like R package repositories. Defaults Posit Package Manager CRAN mirror. skip character string containing regular expression matching names packages skip. Defaults FALSE, meaning keep packages. ... Arguments passed add_pkg repo_dir package repository directory. Defaults \"./repo\". remotes character vector package references prefer remote source. Defaults NA, meaning prefer built-list references packages pre-modified use webR. dependencies Dependency specification packages additionally add repository. Defaults FALSE, meaning additional packages. Use NA install hard dependencies whereas TRUE installs optional dependencies well. See pkgdepends::as_pkg_dependencies details. compress TRUE, add compress Emscripten virtual filesystem metadata resulting R package binary .tgz files. Otherwise, file_packager() used create uncompressed virtual filesystem images included output binary package repository. Defaults TRUE.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/add_tar_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Emscripten virtual filesystem metadata to a given tar archive — add_tar_index","title":"Add Emscripten virtual filesystem metadata to a given tar archive — add_tar_index","text":"Calculates file offsets metadata content stored (optionally gzip compressed) tar archive. added, tar archive metadata can mounted Emscripten filesystem image, making contents archive available WebAssembly R process.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/add_tar_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Emscripten virtual filesystem metadata to a given tar archive — add_tar_index","text":"","code":"add_tar_index(file, strip = 0)"},{"path":"https://r-wasm.github.io/rwasm/reference/add_tar_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Emscripten virtual filesystem metadata to a given tar archive — add_tar_index","text":"file Filename tar archive metadata added. strip Remove specified number leading path elements mounting webR. Defaults 0.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/add_tar_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Emscripten virtual filesystem metadata to a given tar archive — add_tar_index","text":"virtual filesystem metadata appended end tar archive, output replacing original file. resulting archive hosted online URL can provided webR mounting virtual filesystem. strip greater 0 virtual filesystem metadata generated mounted webR specified number leading path elements removed. Useful R package binaries data files stored original .tgz file subdirectory. Files fewer path name elements specified amount skipped.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/build.html","id":null,"dir":"Reference","previous_headings":"","what":"Build one or more R packages for WebAssembly — build","title":"Build one or more R packages for WebAssembly — build","text":"Downloads builds R package references given packages, compiling package use WebAssembly webR. resulting WebAssembly binary packages written out_dir.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build one or more R packages for WebAssembly — build","text":"","code":"build(   packages,   out_dir = \".\",   remotes = NULL,   dependencies = FALSE,   compress = TRUE )"},{"path":"https://r-wasm.github.io/rwasm/reference/build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build one or more R packages for WebAssembly — build","text":"packages character vector one package references. out_dir output directory. Defaults \".\". remotes character vector package references prefer remote source. NA, use built-list references packages pre-modified use webR. Defaults NULL, meaning preference usual remote sources. dependencies Dependency specification packages additionally add repository. Defaults FALSE, meaning additional packages. Use NA install hard dependencies whereas TRUE installs optional dependencies well. See pkgdepends::as_pkg_dependencies details. compress TRUE, add compress Emscripten virtual filesystem metadata resulting R package binary .tgz files. Otherwise, file_packager() used create uncompressed virtual filesystem images included output binary package repository. Defaults TRUE.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/file_packager.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Emscripten filesystem image — file_packager","title":"Create an Emscripten filesystem image — file_packager","text":"Uses Emscripten's file_packager tool build Emscripten filesystem image can mounted webR. filesystem image may contain arbitrary data made available use WebAssembly R process mounted.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/file_packager.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Emscripten filesystem image — file_packager","text":"","code":"file_packager(in_dir, out_dir = \"./vfs\", out_name = NULL, compress = FALSE)"},{"path":"https://r-wasm.github.io/rwasm/reference/file_packager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Emscripten filesystem image — file_packager","text":"in_dir Directory packaged filesystem image. out_dir Directory write output image files. Defaults \"./vfs\". out_name character string output image base filename. NULL, defaults final component input directory path. compress Logical. TRUE, compressed version filesystem data included output. Defaults FALSE.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/file_packager.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Emscripten filesystem image — file_packager","text":"Outputs least two files (named out_name) out_dir directory: data file extension \".data\", metadata file extension \".js.metadata\". files hosted online URL can provided webR mounting Emscripten virtual filesystem. compress TRUE, additional file extension \".data.gz\" also output containing compressed version filesystem data. metadata file also changed reflect availability compressed version data.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/make_library.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an R package library — make_library","title":"Create an R package library — make_library","text":"Extracts R packages contained repository directory repo_dir writes library directory lib_dir.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/make_library.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an R package library — make_library","text":"","code":"make_library(repo_dir = \"./repo\", lib_dir = \"./lib\", strip = NULL)"},{"path":"https://r-wasm.github.io/rwasm/reference/make_library.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an R package library — make_library","text":"repo_dir package repository directory. Defaults \"./repo\". lib_dir Package library output directory. Defaults \"./lib\". strip character vector directories strip R package.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/make_library.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an R package library — make_library","text":"lib_dir directory created already exist. strip argument may used strip certain directories packages installed library directory lib_dir. can used reduce total library file size removing directories strictly necessary R package run, directories containing documentation vignettes.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/make_vfs_library.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Emscripten filesystem image of an R package library — make_vfs_library","title":"Create an Emscripten filesystem image of an R package library — make_vfs_library","text":"Extracts binary R packages contained repository directory repo_dir creates Emscripten filesystem image containing resulting package library.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/make_vfs_library.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Emscripten filesystem image of an R package library — make_vfs_library","text":"","code":"make_vfs_library(   out_dir = \"./vfs\",   out_name = \"library.data\",   repo_dir = \"./repo\",   compress = FALSE,   ... )"},{"path":"https://r-wasm.github.io/rwasm/reference/make_vfs_library.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Emscripten filesystem image of an R package library — make_vfs_library","text":"out_dir Directory write output image files. Defaults \"./vfs\". out_name character string output library image filename. repo_dir package repository directory. Defaults \"./repo\". compress TRUE, add compress Emscripten virtual filesystem metadata resulting R package binary .tgz files. Otherwise, file_packager() used create uncompressed virtual filesystem images included output binary package repository. Defaults TRUE. ... Arguments passed make_library strip character vector directories strip R package.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/make_vfs_library.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Emscripten filesystem image of an R package library — make_vfs_library","text":"single filesystem image generated using Emscripten's file_packager() tool output .data .js.metadata filesystem image files written directory out_dir. compress TRUE, additional file extension \".data.gz\" also output containing compressed version filesystem data. resulting image can downloaded webR mounted Emscripten virtual filesystem efficient way provide pre-configured R library, without installing R package individually.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/make_vfs_repo.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Emscripten filesystem images to an R package repository — make_vfs_repo","title":"Add Emscripten filesystem images to an R package repository — make_vfs_repo","text":"Creates Emscripten filesystem image R package exists package repository directory repo_dir.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/make_vfs_repo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Emscripten filesystem images to an R package repository — make_vfs_repo","text":"","code":"make_vfs_repo(repo_dir = \"./repo\", compress = FALSE)"},{"path":"https://r-wasm.github.io/rwasm/reference/make_vfs_repo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Emscripten filesystem images to an R package repository — make_vfs_repo","text":"repo_dir package repository directory. Defaults \"./repo\". compress TRUE, add compress Emscripten virtual filesystem metadata resulting R package binary .tgz files. Otherwise, file_packager() used create uncompressed virtual filesystem images included output binary package repository. Defaults TRUE.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/make_vfs_repo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Emscripten filesystem images to an R package repository — make_vfs_repo","text":"filesystem image generated using Emscripten's file_packager() tool output .data .js.metadata filesystem image files written repository directory package binary .tgz files. resulting filesystem images may used webR download install R packages mounting .data images Emscripten virtual filesystem. compress TRUE, additional file extension \".data.gz\" also output containing compressed version filesystem data.","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/rm_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove R package(s) from a package repository — rm_pkg","title":"Remove R package(s) from a package repository — rm_pkg","text":"Remove R package(s) package repository","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/rm_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove R package(s) from a package repository — rm_pkg","text":"","code":"rm_pkg(packages, repo_dir = \"./repo\")"},{"path":"https://r-wasm.github.io/rwasm/reference/rm_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove R package(s) from a package repository — rm_pkg","text":"packages character vector one package names. repo_dir package repository directory. Defaults \"./repo\".","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/rwasm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rwasm: Build R Packages for WebAssembly — rwasm-package","title":"rwasm: Build R Packages for WebAssembly — rwasm-package","text":"Utility functions help build R packages compiled WebAssembly (Wasm), manage Wasm binary R package libraries repositories, prepare webR compatible filesystem images static web hosting data files R packages.","code":""},{"path":[]},{"path":"https://r-wasm.github.io/rwasm/reference/rwasm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rwasm: Build R Packages for WebAssembly — rwasm-package","text":"Maintainer: George Stagg george.stagg@posit.co contributors: Lionel Henry lionel@posit.co [contributor] Jeroen Ooms jeroen@berkeley.edu [contributor] Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/write_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Write the PACKAGES file for a package repository — write_packages","title":"Write the PACKAGES file for a package repository — write_packages","text":"Write PACKAGES file package repository","code":""},{"path":"https://r-wasm.github.io/rwasm/reference/write_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write the PACKAGES file for a package repository — write_packages","text":"","code":"write_packages(repo_dir = \"./repo\")"},{"path":"https://r-wasm.github.io/rwasm/reference/write_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write the PACKAGES file for a package repository — write_packages","text":"repo_dir package repository directory. Defaults \"./repo\".","code":""},{"path":[]},{"path":[]},{"path":"https://r-wasm.github.io/rwasm/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"rwasm 0.2.0","text":"building R packages compress set TRUE, use binary R package .tgz file Emscripten filesystem image data generate custom metadata rather using Emscripten’s file_packager tool. Support new compress argument file_packager(), make_vfs_library(), related functions. enabled, VFS images compressed using gzip (#39). Note: Mounting processed .tgz archives compressed VFS images requires least version 0.4.2 webR.","code":""},{"path":[]},{"path":"https://r-wasm.github.io/rwasm/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"rwasm 0.1.0","text":"Added mechanism override AC_CHECK_FUNCS Autoconf (#32). Shim uname pkg-config cross-compiling (#9). Added documentation.","code":""},{"path":"https://r-wasm.github.io/rwasm/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"rwasm 0.1.0","text":"dependencies argument add_pkg() now FALSE default. Made CXX17 default (#12).","code":""},{"path":"https://r-wasm.github.io/rwasm/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"rwasm 0.1.0","text":"Packages using OpenMP can now cross-compiled (#17). Prevent packages accessing host LIBS (#10). Use default shell running configure scripts (#8). Various tweaks bug fixes cross-compiling Linux host.","code":""},{"path":[]},{"path":"https://r-wasm.github.io/rwasm/news/index.html","id":"breaking-changes-0-0-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"rwasm 0.0.1","text":"R package converted existing set R scripts Makefile workflow. Users relying old workflow need rewrite processes work using new rwasm R package.","code":""}]
